// Оновлена Prisma схема з усіма String як varchar

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid()) @db.VarChar(255)
  name          String   @db.VarChar(255)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  credentialsId String?  @unique @db.VarChar(255)
  roles         UsersRoles[]
  comments      Comment[]
  credentials   Credentials? @relation(fields: [credentialsId], references: [id])
  stories       Story[]      @relation("UserToStory")
}

model Story {
  id         String   @id @default(uuid()) @db.VarChar(255)
  title      String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  authorId   String?  @db.VarChar(255)
  author     User?    @relation("UserToStory", fields: [authorId], references: [id])
  comments   Comment[]
  contents   Content[]
}

model Comment {
  id        String   @id @default(uuid()) @db.VarChar(255)
  text      String   @db.VarChar(500)
  userId    String?  @db.VarChar(255)
  storyId   String?  @db.VarChar(255)
  parentId  String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  story     Story?   @relation(fields: [storyId], references: [id])
  parent    Comment? @relation("CommentToComment", fields: [parentId], references: [id])
  children  Comment[] @relation("CommentToComment")
}

model Credentials {
  id        String   @id @default(uuid()) @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  telegram  String?  @db.VarChar(255)
  phone     String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?
}

model Content {
  id        String   @id @default(uuid()) @db.VarChar(255)
  elkId     String?  @db.VarChar(255)
  elkIndex  String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storyId   String?  @db.VarChar(255)
  story     Story?   @relation(fields: [storyId], references: [id])
}

model Role {
  code  String   @id @db.VarChar(50)
  label String   @db.VarChar(255)
  users UsersRoles[]
}

model UsersRoles {
  id        String   @id @default(uuid()) @db.VarChar(255)
  userId    String   @db.VarChar(255)
  roleCode  String   @db.VarChar(50)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleCode], references: [code])
}
